# -*- coding: utf-8 -*-
"""Task1a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jhRva3UymKnO9KZwZEpmdV_A515GGdpc
"""

import pandas as pd
import numpy as np

data = {'col1': [45, np.nan, 3, 7, np.nan, 18],
        'col2': ['A', 'C', np.nan, 'Z', 'C', np.nan],
        'col3': [12,13,np.nan,11,13,42]}
df = pd.DataFrame(data)

print(df)
print("Dropped values")
print(df.dropna())

print("Dataframe after filling missing values:")
df_fillna = df.fillna(value={'col1': 0, 'col2': 0, 'col3': 0})
print(df_fillna)
data_with_duplicates = {'col1': [45, np.nan, 3, 7, np.nan, 18],
        'col2': ['A', 'C', np.nan, 'Z', 'C', np.nan],
        'col3': [12,13,np.nan,11,13,42]}

df_duplicates = pd.DataFrame(data_with_duplicates)
print("\nDataFrame with duplicates:")
print(df_duplicates)

print("\nIdentifying duplicates:")
print(df_duplicates.duplicated())

df_no_duplicates = df_duplicates.drop_duplicates()
print("\nDataFrame after removing duplicates:")
print(df_no_duplicates)

"""1.ii)"""

import pandas as pd
data = {'Animal': ['Cat', 'Cat', 'Dog', 'Dog'],
        'Breed': ['Persian', 'Siamese', 'Golden Retriever', 'Labrador'],
        'Age': [2, 1, 5, 3]}

#Hierarchical index
index = pd.MultiIndex.from_tuples(list(zip(data['Animal'], data['Breed'])),names=['Animal', 'Breed'])
df = pd.DataFrame(data, index=index)

# Select outer level
cats = df.loc['Cat']
# Select inner level
siamese_cats = df.loc[('Cat', 'Siamese')]

print("Original DataFrame:\n", df)
print("\nAll Cats:\n", cats)
print("\nSiamese Cats:\n", siamese_cats)

"""Task 1B i)

"""

import matplotlib.pyplot as plt

x = [1,2,3,4,5,6,7]
y = [1,3,4,5,7,9,11]

# Create a figure and axis
fig, ax = plt.subplots(figsize=(7,7))

# Plot the data
ax.plot(x, y, marker='o', linestyle='--', color='b', label='Prime Numbers')

ax.set_title('Prime Numbers Line Plot')
ax.set_xlabel('Index')
ax.set_ylabel('Prime Number')

ax.set_xticks([1,2,3,4,5,6,7])
ax.set_xticklabels([1,2,3,4,5,6,7])
ax.set_yticks([1,3,4,5,7,9,11])
ax.set_yticklabels([1,3,4,5,7,9,11])

ax.annotate('First Prime', xy=(1, 1), xytext=(3,3),
            arrowprops=dict(facecolor='black'))
ax.annotate('Largest Prime', xy=(7, 11), xytext=(6,10),
            arrowprops=dict(facecolor='purple'))
ax.legend()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Sample data
data = {
    'First installment': [14,23,13,11],
    'Second installment': [12,13,30,22],
    'Third installment': [5,12,18,28]   }
df = pd.DataFrame(data, index=['Q1', 'Q2', 'Q3', 'Q4'])
print(df)

fig, ax = plt.subplots(figsize=(6,6))

# Plotting grouped bar plots
df.plot(kind='bar', ax=ax)

#Title and Axis labels
ax.set_title('Grouped Bar Plot')
ax.set_xlabel('Quarters')
ax.set_ylabel('installments')

plt.show()




#1B ii)b
# Create a figure and axis
fig, ax = plt.subplots(figsize=(6,6))

# Plotting stacked bar plots
df.plot(kind='bar', stacked=True, ax=ax)

# Set the title and axis labels
ax.set_title('Stacked Bar Plot')
ax.set_xlabel('Quarters')
ax.set_ylabel('installments')
plt.show()

"""2a
i)
"""

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

data = np.random.randn(1000)

fig, ax = plt.subplots(figsize=(6,6))
ax.hist(data, bins=30,edgecolor='purple')
ax.set_title('Histogram of Value Frequency')
ax.set_xlabel('Value')
ax.set_ylabel('Frequency')
plt.show()


fig,ax = plt.subplots(figsize=(6,6))
sns.kdeplot(data, ax=ax, shade=True)
ax.set_title('Density Plot')
ax.set_xlabel('Value')
ax.set_ylabel('Density')
plt.show()

"""TASK 2 ii)"""

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
data1=np.random.rand(100)
data2=2*data1+np.random.normal(0, 0.8, 100)
sns.scatterplot(x=data1,y=data2)
plt.show()

"""TASK 2 iii)"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Generate sample data
np.random.seed(0)
data = {
    'Category': np.random.choice(['A', 'B', 'C', 'D'], size=10),
    'Value': np.random.randn(10)}

df = pd.DataFrame(data)
print(df.head())

sns.boxplot(x='Category', y='Value', data=df)

plt.show()

"""3 i)"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

initial_date = datetime(2024,6,1)
date_list = [initial_date + timedelta(days=x) for x in range(30)]

data = np.random.rand(30)

time_series = pd.Series(data, index=date_list)
print("Length of the internship course is")
print(time_series)

"""3ii)"""

import pandas as pd
import numpy as np

initial_date = '2024-06-01'
len = 30
datetime_index = pd.date_range(start=initial_date, periods=len)

data = np.random.rand(len)

time_series = pd.Series(data, index=datetime_index)

print(time_series)

import pandas as pd
import numpy as np

start_date = '2024-06-01'
periods = 10
datetime_index = pd.date_range(start=start_date, periods=periods)

datetime_index_utc = datetime_index.tz_localize('UTC')

datetime_index_est = datetime_index_utc.tz_convert('US/Eastern')

data_utc = np.random.rand(periods)
data_est = np.random.rand(periods)

time_series_utc = pd.Series(data_utc, index=datetime_index_utc)
time_series_est = pd.Series(data_est, index=datetime_index_est)

print("Time Series in UTC:")
print(time_series_utc)

print("\nTime Series in US/Eastern:")
print(time_series_est)

combined_df = pd.DataFrame({'UTC': time_series_utc, 'US/Eastern': time_series_est})
print("\nCombined Time Series:")
print(combined_df)

"""3 iv)"""

import pandas as pd

p1 = pd.Period('2024-06-01')
p3 = p1 + 4
p4 = p1 - 4
period_range = pd.period_range(start=p4, end=p3, freq='D')
print("p1: {p1}")
print("p2: {p2}")
print("p3: {p3}")
print("p4: {p4}")
print(f"Period Range:{period_range}")